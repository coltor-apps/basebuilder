// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`inputs validation store > can be created 1`] = `
{
  "getData": [Function],
  "getSerializedData": [Function],
  "resetEntitiesInputsErrors": [Function],
  "resetEntityInputError": [Function],
  "resetEntityInputsErrors": [Function],
  "setData": [Function],
  "setEntityInputError": [Function],
  "setEntityInputsErrors": [Function],
  "setSerializedData": [Function],
  "subscribe": [Function],
  "validateEntitiesInputs": [Function],
  "validateEntityInput": [Function],
  "validateEntityInputs": [Function],
}
`;

exports[`inputs validation store > can be created with initial errors 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": [Error],
    },
  },
}
`;

exports[`inputs validation store > can be created with initial errors 2`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can be created with initial errors 3`] = `"Unkown entity input \\"invalid\\"."`;

exports[`inputs validation store > can reset a single entity input error 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "label error",
      "title": "title error",
    },
  },
}
`;

exports[`inputs validation store > can reset a single entity input error 2`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "title": "title error",
    },
  },
}
`;

exports[`inputs validation store > can reset a single entity input error 3`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can reset a single entity input error 4`] = `"Unkown entity input \\"invalid\\"."`;

exports[`inputs validation store > can reset a single entity input error 5`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "label error",
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "title error",
            "inputName": "title",
          },
        },
      ],
    ],
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": undefined,
            "inputName": "label",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can reset all inputs errors for a single entity 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "label error",
      "title": "title error",
    },
  },
}
`;

exports[`inputs validation store > can reset all inputs errors for a single entity 2`] = `
{
  "entitiesInputsErrors": Map {},
}
`;

exports[`inputs validation store > can reset all inputs errors for a single entity 3`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can reset all inputs errors for a single entity 4`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "label error",
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "title error",
            "inputName": "title",
          },
        },
      ],
    ],
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": undefined,
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": undefined,
            "inputName": "title",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can reset all inputs errors for all entities 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "label error",
    },
    "51324b32-adc3-4d17-a90e-66b5453935bd" => {
      "title": "title error",
    },
  },
}
`;

exports[`inputs validation store > can reset all inputs errors for all entities 2`] = `
{
  "entitiesInputsErrors": Map {},
}
`;

exports[`inputs validation store > can reset all inputs errors for all entities 3`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": undefined,
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "51324b32-adc3-4d17-a90e-66b5453935bd",
            "error": undefined,
            "inputName": "title",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can set a single entity input error 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "Some error",
      "title": "Title error",
    },
  },
}
`;

exports[`inputs validation store > can set a single entity input error 2`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can set a single entity input error 3`] = `"Unkown entity input \\"invalid\\"."`;

exports[`inputs validation store > can set a single entity input error 4`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "Some error",
            "inputName": "label",
          },
        },
      ],
    ],
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "Title error",
            "inputName": "title",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can set multiple input errors for a single entity 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "some error",
      "title": "another error",
    },
  },
}
`;

exports[`inputs validation store > can set multiple input errors for a single entity 2`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can set multiple input errors for a single entity 3`] = `"Unkown entity input \\"invalid\\"."`;

exports[`inputs validation store > can set multiple input errors for a single entity 4`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "some error",
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": "another error",
            "inputName": "title",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can set raw data 1`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can set raw data 2`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "some error",
    },
  },
}
`;

exports[`inputs validation store > can set raw data 3`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "DataSet",
          "payload": {
            "data": {
              "entitiesInputsErrors": Map {
                "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
                  "label": "some error",
                },
              },
            },
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can set the data 1`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can set the data 2`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": "some error",
    },
  },
}
`;

exports[`inputs validation store > can set the data 3`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "DataSet",
          "payload": {
            "data": {
              "entitiesInputsErrors": Map {
                "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
                  "label": "some error",
                },
              },
            },
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can validate a all inputs of a single entity 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
      "maxLength": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [],
    "message": "Expected number, received string"
  }
]],
    },
  },
}
`;

exports[`inputs validation store > can validate a all inputs of a single entity 2`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can validate a all inputs of a single entity 3`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [],
    "message": "Expected number, received string"
  }
]],
            "inputName": "maxLength",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can validate a all inputs of all entities 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
    },
    "51324b32-adc3-4d17-a90e-66b5453935bd" => {
      "maxLength": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [],
    "message": "Expected number, received string"
  }
]],
    },
  },
}
`;

exports[`inputs validation store > can validate a all inputs of all entities 2`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": undefined,
            "inputName": "maxLength",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "51324b32-adc3-4d17-a90e-66b5453935bd",
            "error": undefined,
            "inputName": "label",
          },
        },
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "51324b32-adc3-4d17-a90e-66b5453935bd",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [],
    "message": "Expected number, received string"
  }
]],
            "inputName": "maxLength",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`inputs validation store > can validate a single entity input 1`] = `
{
  "entitiesInputsErrors": Map {
    "6e0035c3-0d4c-445f-a42b-2d971225447c" => {
      "label": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
    },
    "51324b32-adc3-4d17-a90e-66b5453935bd" => {
      "label": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [],
    "message": "Required"
  }
]],
    },
  },
}
`;

exports[`inputs validation store > can validate a single entity input 2`] = `"Entity with ID \\"invalid\\" was not found."`;

exports[`inputs validation store > can validate a single entity input 3`] = `"Unkown entity input \\"invalid\\"."`;

exports[`inputs validation store > can validate a single entity input 4`] = `
[MockFunction spy] {
  "calls": [
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "6e0035c3-0d4c-445f-a42b-2d971225447c",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "number",
    "path": [],
    "message": "Expected string, received number"
  }
]],
            "inputName": "label",
          },
        },
      ],
    ],
    [
      [
        {
          "name": "EntityInputErrorUpdated",
          "payload": {
            "entityId": "51324b32-adc3-4d17-a90e-66b5453935bd",
            "error": [ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [],
    "message": "Required"
  }
]],
            "inputName": "label",
          },
        },
      ],
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
